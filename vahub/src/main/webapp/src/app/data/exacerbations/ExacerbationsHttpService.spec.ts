import {HttpClient} from '@angular/common/http';
import {HttpClientTestingModule} from '@angular/common/http/testing';
import {async, inject, TestBed} from '@angular/core/testing';
import {Observable} from 'rxjs/Observable';
import {ExacerbationsFiltersModel, LungFunctionFiltersModel, PopulationFiltersModel} from '../../filters/module';

import * as utils from '../../common/utils/Utils';
import {MockFilterModel, MockHttpClient} from '../../common/MockClasses';
import {PlotType} from '../../common/trellising/store';
import {ExacerbationsBarLineChartHttpService} from './ExacerbationsBarLineChartHttpService';
import {ExacerbationsHttpService} from './ExacerbationsHttpService';
import Dataset = Request.Dataset;

describe('GIVEN RespiratoryHttpService', () => {

    const mockStudy = [{
        id: 1,
        type: 'DetectDataset',
        canView: true,
        rolePermissionMask: 3,
        viewPermissionMask: 3,
        autoGeneratedId: true,
        name: '',
        shortNameByType: '',
        supertype: ''
    }];

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            providers: [
                {provide: HttpClient, useClass: MockHttpClient},
                {provide: PopulationFiltersModel, useClass: MockFilterModel},
                {provide: LungFunctionFiltersModel, useClass: MockFilterModel},
                {provide: ExacerbationsFiltersModel, useClass: MockFilterModel},
                {
                    provide: ExacerbationsBarLineChartHttpService,
                    useClass: ExacerbationsBarLineChartHttpService,
                    deps: [
                        HttpClient, PopulationFiltersModel, LungFunctionFiltersModel, ExacerbationsFiltersModel]
                },
                {
                    provide: ExacerbationsHttpService, useClass: ExacerbationsHttpService, deps: [
                        HttpClient, PopulationFiltersModel, LungFunctionFiltersModel, ExacerbationsFiltersModel]
                }
            ]
        });
    });

    describe('WHEN we get Bar Line chart data', () => {

        it('THEN the data is returned', async(inject([HttpClient, ExacerbationsBarLineChartHttpService],
            (httpClient, httpService) => {
                const mockResponse = [{
                    trellisedBy: [{
                        trellisedBy: 'MEASUREMENT',
                        category: 'MANDATORY_TRELLIS',
                        trellisOption: 'Forced Expiratory Volume in 1 second (L)'
                    }, {
                        trellisedBy: 'ARM',
                        category: 'NON_MANDATORY_TRELLIS',
                        trellisOption: 'Placebo'
                    }],
                    data: []
                }];
                const settings = {
                    settings: {
                        options: {
                            'X_AXIS': 'X Axis',
                            'Y_AXIS': 'Y Axis',
                            'COLOR_BY': 'Color by',
                        },
                        trellisOptions: [
                            {
                                category: 'MANDATORY_TRELLIS',
                                trellisedBy: 'MEASUREMENT',
                                trellisOptions: ['PH-HYPO', 'CREATININE (MG/DL)']
                            },
                            {
                                category: 'NON_MANDATORY_TRELLIS',
                                trellisedBy: 'ARM',
                                trellisOptions: ['Placebo', 'SuperDex 10 mg', 'SuperDex 20 mg']
                            }
                        ]
                    }
                };

                spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

                httpService.getPlotData(mockStudy, 'COUNT_INCLUDING_DURATION', settings).subscribe((res) => {
                    const expectedResponse = {
                        plotType: PlotType.BARLINECHART,
                        trellising: mockResponse[0].trellisedBy,
                        data: mockResponse[0].data
                    };
                    expect(res.toJS()[0]).toEqual(expectedResponse);
                });
            })));
    });

    describe('WHEN we get exacerbations details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, ExacerbationsHttpService],
            (httpClient, httpService) => {
                const mockResponse = {dodData: 'some data'};

                spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

                httpService.getDetailsOnDemand(mockStudy, ['ev-1'], 'subjectId', 'asc').subscribe((res) => {
                    expect(res).toEqual('some data');
                });
            })));
    });


    describe('WHEN we download all the Exacerbations details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, ExacerbationsHttpService],
            (httpClient, httpService: ExacerbationsHttpService) => {
                spyOn(utils, 'downloadData');
                const mockResponse = [{
                    subjectId: 'E0000100232'
                }];

                spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

                httpService.downloadAllDetailsOnDemandData(<Dataset[]>mockStudy);

                expect(utils.downloadData).toHaveBeenCalled();
            })));
    });
});

package com.acuity.visualisations.rawdatamodel.dataset.info;

import com.acuity.visualisations.config.ApplicationEnableExecutorConfig;
import com.acuity.visualisations.config.annotation.TransactionalOracleITTest;
import com.acuity.visualisations.config.config.ApplicationModelConfigITCase;
import com.acuity.va.security.acl.domain.ClinicalStudy;
import com.acuity.va.security.acl.domain.DrugProgramme;
import com.acuity.va.security.acl.domain.AcuityDataset;
import com.acuity.va.security.acl.domain.AcuityObjectIdentity;
import com.acuity.va.security.acl.domain.vasecurity.ClinicalStudyInfo;
import com.acuity.va.security.acl.domain.vasecurity.DatasetInfo;
import com.acuity.va.security.acl.domain.vasecurity.DrugProgrammeInfo;
import lombok.SneakyThrows;
import org.apache.commons.lang3.time.FastDateFormat;
import org.assertj.core.api.JUnitSoftAssertions;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

import static com.acuity.visualisations.config.util.TestConstants.DUMMY_ACUITY_VA_ID;
import static com.acuity.va.security.acl.domain.AcuityObjectIdentityImpl.Origin.ACUITY;
import static java.lang.System.out;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.tuple;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = {ApplicationModelConfigITCase.class, ApplicationEnableExecutorConfig.class})
@TransactionalOracleITTest
public class WhenRunningAcuityInfoServiceITCase {

    @Autowired
    private InfoService infoService;

    @Rule
    public final JUnitSoftAssertions softly = new JUnitSoftAssertions();
    
    @Test
    public void shouldListAllRoisAndByGeneratingThemFromDatasets() {
        List<AcuityObjectIdentity> listObjectIdentities = infoService.generateObjectIdentities();

        listObjectIdentities.forEach(out::println);
        softly.assertThat(listObjectIdentities.size()).isGreaterThanOrEqualTo(3);
        softly.assertThat(listObjectIdentities).extracting("origin").contains(ACUITY);

        // dataset
        List<AcuityObjectIdentity> datasets = listObjectIdentities.stream().filter(AcuityObjectIdentity::thisDatasetType).collect(toList());

        softly.assertThat(datasets.size()).isGreaterThanOrEqualTo(1);
        softly.assertThat(listObjectIdentities).filteredOn(AcuityObjectIdentity::thisDatasetType).
                extracting("id", "name", "clinicalStudyCode", "clinicalStudyName", "drugProgramme").
                contains(tuple(819L, "D1234C00001", "D1234C00001", "D1234C00001", "demo"),
                        tuple(835L, "Dummy", "Dummy", "Dummy", "demo")
                        );
        softly.assertThat(listObjectIdentities).filteredOn(AcuityObjectIdentity::thisDatasetType).extracting("drugProgramme").contains("demo");

        // clinical studies
        softly.assertThat(listObjectIdentities).filteredOn(roi -> roi.thisClinicalStudyType()).isNotEmpty();
        softly.assertThat(listObjectIdentities).filteredOn(roi -> roi.thisClinicalStudyType()).
                extracting("id", "name", "drugProgramme").contains(tuple(2116807444L, "D1234C00001", "demo"));
        softly.assertThat(listObjectIdentities).filteredOn(roi -> roi.thisClinicalStudyType()).extracting("drugProgramme").contains("demo");
        listObjectIdentities.stream().filter(i -> i.thisClinicalStudyType()).forEach(i -> System.out.println(i.getName() + " " + i.isAutoGeneratedId()));

        softly.assertThat(listObjectIdentities).filteredOn(roi -> roi.thisClinicalStudyType()).extracting("autoGeneratedId").containsOnly(true);

        // drug programme
        softly.assertThat(listObjectIdentities).filteredOn(roi -> roi.thisDrugProgrammeType()).isNotEmpty();
        softly.assertThat(listObjectIdentities).filteredOn(roi -> roi.thisDrugProgrammeType()).extracting("autoGeneratedId").containsOnly(true);
        softly.assertThat(listObjectIdentities).filteredOn(roi -> roi.thisDrugProgrammeType()).extracting("name").contains("demo");
    }

    @Test
    public void shouldGetDrugProgrammeInfo() {
        DrugProgramme acuityDrugProgramme = new DrugProgramme("demo");

        DrugProgrammeInfo drugProgrammeInfo = infoService.getDrugProgrammeInfo(acuityDrugProgramme);
        System.out.println(drugProgrammeInfo);

        softly.assertThat(drugProgrammeInfo.getDrugProgramme()).isEqualTo("demo");
        softly.assertThat(drugProgrammeInfo.getAddedDate()).isEqualToIgnoringHours(toDate("2017-09-14"));
    }

    @Test
    public void shouldGetClinicalStudyInfo() {
        ClinicalStudy acuityClinicalStudy = new ClinicalStudy("D1234C00001");

        ClinicalStudyInfo clinicalStudyInfo = infoService.getClinicalStudyInfo(acuityClinicalStudy);
        System.out.println(clinicalStudyInfo);

        softly.assertThat(clinicalStudyInfo.getDrugProgramme()).isEqualTo("demo");
        softly.assertThat(clinicalStudyInfo.getName()).isEqualTo("D1234C00001");
        softly.assertThat(clinicalStudyInfo.getCode()).isEqualTo("D1234C00001");
    }

    @Test
    public void shouldGetDatasetInfo() {
        AcuityDataset acuityDetectDataset = new AcuityDataset(DUMMY_ACUITY_VA_ID, "cs");

        DatasetInfo detectDatasetInfo = infoService.getDatasetInfo(acuityDetectDataset);
        System.out.println(detectDatasetInfo);

        softly.assertThat(detectDatasetInfo.getDrugProgramme()).isEqualTo("demo");
        softly.assertThat(detectDatasetInfo.getClinicalStudy()).isEqualTo("D1234C00001");
        softly.assertThat(detectDatasetInfo.getName()).isEqualTo("D1234C00001");
        softly.assertThat(detectDatasetInfo.getAddedDate()).isEqualToIgnoringHours(toDate("2018-12-25"));
        softly.assertThat(detectDatasetInfo.getAddedBy()).isNull();
    }



    private static final String YMD = "yyyy-MM-dd";
    private static final FastDateFormat YMD_PARSER = FastDateFormat.getInstance(YMD, TimeZone.getDefault(), Locale.ENGLISH);

    @SneakyThrows
    private static Date toDate(String str) {
            return YMD_PARSER.parse(str);
    }

}
